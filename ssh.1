.\"
.\" Author: Tatu Ylonen <ylo@cs.hut.fi>
.\" Copyright (c) 1995 Tatu Ylonen <ylo@cs.hut.fi>, Espoo, Finland
.\"                    All rights reserved
.\"
.\" As far as I am concerned, the code I have written for this software
.\" can be used freely for any purpose.  Any derived versions of this
.\" software must be clearly marked as such, and if the derived work is
.\" incompatible with the protocol description in the RFC file, it must be
.\" called by a name other than "ssh" or "Secure Shell".
.\"
.\" Copyright (c) 1999,2000 Markus Friedl.  All rights reserved.
.\" Copyright (c) 1999 Aaron Campbell.  All rights reserved.
.\" Copyright (c) 1999 Theo de Raadt.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
.\" OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
.\" IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
.\" INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
.\" NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
.\" DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
.\" THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
.\" (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
.\" THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.\"
.\" Japanese translation by Yusuke Shinyama <yusuke at cs . nyu . edu>
.\"
.\" $OpenBSD: ssh.1,v 1.321 2011/08/26 01:45:15 djm Exp $
.Dd $Mdocdate: August 26 2011 $
.Dt SSH 1
.Os
.Sh 名前
.Nm ssh
.Nd OpenSSH SSH クライアント (リモート ログイン プログラム)
.Sh 書式
.Nm ssh
.Bk -words
.Op Fl 1246AaCfgKkMNnqsTtVvXxYy
.Op Fl b Ar bindするアドレス
.Op Fl c Ar 暗号方式
.Op Fl D Oo Ar bindするアドレス : Oc Ns Ar ポート
.Op Fl e Ar エスケープ文字
.Op Fl F Ar 設定ファイル
.Op Fl I Ar pkcs11
.Op Fl i Ar identityファイル
.Op Fl L Oo Ar bindするアドレス : Oc Ns Ar ポート : Ns Ar ホスト : Ns Ar ホスト側ポート
.Op Fl l Ar ログイン名
.Op Fl m Ar MAC指定
.Op Fl O Ar 制御コマンド
.Op Fl o Ar オプション
.Op Fl p Ar ポート
.Op Fl R Oo Ar bindするアドレス : Oc Ns Ar ポート : Ns Ar ホスト : Ns Ar ホスト側ポート
.Op Fl S Ar 制御用パス名
.Op Fl W Ar ホスト : Ns Ar ポート
.Op Fl w Ar ローカルtun Ns Op : Ns Ar リモートtun
.Oo Ar ユーザ Ns @ Oc Ns Ar ホスト名
.Op Ar コマンド
.Ek
.Sh 説明
.Nm
(SSH クライアント) はリモートマシンにログインしたり、
リモートマシン上でコマンドを実行するためのプログラムです。
これは rlogin と rsh を置き換えるためのもので、
安全でないネットワーク上にある
2 つの信頼されていないホスト間で、
暗号化された安全な通信を提供します。X11 接続や
任意の TCP ポートなども安全な通信路を通して転送できます。
.Pp
.Nm
は指定された 
.Ar ホスト名
に接続し、
(オプションが指定された場合はその
.Ar ユーザ
で)
ログインします。
ユーザはリモートマシンに対して、
本人であることを証明する必要があります。
プロトコルのバージョンに応じて、これには
いくつかある方法からひとつを使います (下記参照) :
.Pp
.Ar コマンド
が指定された場合、リモートホスト上では
ログインシェルのかわりにそのコマンドが実行されます。
.Pp
オプションは次のとおりです:
.Bl -tag -width Ds
.It Fl 1
.Nm
がプロトコル バージョン 1 のみを使うよう強制します。
.It Fl 2
.Nm
がプロトコル バージョン 2 のみを使うよう強制します。
.It Fl 4
.Nm
が IPv4 アドレスのみを使うよう強制します。
.It Fl 6
.Nm
が IPv6 アドレスのみを使うよう強制します。
.It Fl A
認証エージェントの転送を許可します。
これは設定ファイルによってホストごとに指定することも可能です。
.Pp
認証エージェントの転送には注意が必要です。
リモートホスト上で (エージェントの UNIX ドメインソケットに対する)
ファイルアクセス権限を無視できてしまうユーザがいる場合は、
転送された接続を介してローカル側の
認証エージェントにアクセスできてしまうことになります。
攻撃側は認証エージェントから鍵そのものを盗むことはできませんが、
認証エージェントがもっている鍵に認証をおこなわせることはできます。
.It Fl a
認証エージェントの転送を禁止します。
.It Fl b Ar bindするアドレス
接続のソース側のインターフェイスとして、
.Ar bindするアドレス
を使います。
これが有用なのは、複数の IP アドレスをもつマシン上のみです。
.It Fl C
すべてのデータを圧縮するよう指示します (標準入力、標準出力、
標準エラー出力、転送された X11 や TCP 接続を含む)。圧縮に
使われるアルゴリズムは
.Xr gzip 1
と同じもので、プロトコル バージョン 1 の場合
.Dq レベル
が
.Cm CompressionLevel
設定項目によって変更できます。
圧縮は、モデムその他の遅い接続においては必要ですが、高速な
ネットワークでは速度が低下するだけです。このデフォルト値は
ホスト間ごとに設定ファイルに書くことができます。
.Cm Compression
設定項目を参照してください。
.It Fl c Ar 暗号方式
このセッションで使われる暗号の方式を指定します。
.Pp
プロトコル バージョン 1 の場合、指定できる方式はひとつで
.Dq 3des 、
.Dq blowfish
および
.Dq des 
がサポートされています。
.Ar 3des
(トリプル des) は 3 つの異なる鍵を使って
暗号化-復号化-暗号化をおこないます。
これは安全であると考えられているためです。
.Ar blowfish
は高速なブロック暗号方式で、かなり安全であり、
.Ar 3des
よりもずっと高速です。
.Ar des
は、
.Ar 3des
暗号をサポートしていない、もはや古くなったプロトコル 1 の実装と
相互運用するためにのみサポートされています。
.Ar des
暗号は弱いため、このオプションを使用することはおすすめできません。
デフォルトは
.Dq 3des
です。
.Pp
プロトコル バージョン 2 では、
.Ar cipher_spec
はカンマで区切られたリストになっており、
暗号方式の優先順位を指定できます。
より詳しい情報については、
.Xr ssh_config 5
の
.Cm Ciphers
キーワードの項を参照してください。
.It Fl D Xo
.Sm off
.Oo Ar bindするアドレス : Oc
.Ar ポート
.Sm on
.Xc
ローカルホスト側における、アプリケーションレベルの
.Dq 動的な
ポート転送を指定します。
これは次のように実現しています。まずローカル側で
.Ar ポート
を listen するソケットを割り当てます。
.Ar bindするアドレス
が与えられた場合はそのアドレスで listen します。
このポートに向けて接続が張られると、
その接続はつねに安全な通信路に転送されるように
なります。そして、ここでアプリケーションプロトコルが使われ、
そのリモートマシンからどこに接続するかを決めることができます。
今のところ SOCKS4 および SOCKS5 プロトコルが使われており、
.Nm
は SOCKS サーバのようにふるまいます。
特権ポートを転送できるのはスーパーユーザだけです。
動的ポート転送は設定ファイルでも指定できます。
.Pp
IPv6 アドレスはブラケット [ ] で囲むことで指定できます。
特権ポートを転送できるのはスーパーユーザだけです。
デフォルトでは、ローカル側のポートは
.Cm GatewayPorts
の設定に従って bind されますが、
.Ar bindするアドレス
を明示的に使うことで特定のアドレスに
接続を bind することもできます。
.Ar bindするアドレス
が
.Dq localhost
になっている場合、そのポートはローカルホストのみが
使用可能であることを示します。いっぽう、空のアドレスや
.Sq *
を指定すると、そのポートは
すべてのインターフェイスに対して使用可能になります。
.It Fl e Ar エスケープ文字
仮想端末を使うセッションにおけるエスケープ文字を指定します
(デフォルトは
.Ql \&~
)。エスケープ文字は行頭に来たときのみ認識されます。
エスケープ文字のあとにドット
.Ql \&.
がきた場合その接続は閉じられ、control-Z がきた場合には
その接続はサスペンドされます。
このエスケープ文字自身が続いたときには、この文字が 1 回だけ送られます。
エスケープ文字を
.Dq none
に指定するとあらゆるエスケープ機能が禁止され、
セッションは完全に透過になります。
.It Fl F Ar 設定ファイル
ユーザ毎の設定ファイルに別のファイルを指定します。
設定ファイルがコマンドラインから与えられた場合、
システム全体の設定ファイル
.Pq Pa /etc/ssh/ssh_config
は無視されます。デフォルトでは、ユーザ毎の設定ファイルは
.Pa ~/.ssh/config 
になっています。
.It Fl f
.Nm
がコマンドを実行する直前に、
バックグラウンドに移行するよう指示します。これは
.Nm
にパスワードあるいはパスフレーズを入力する必要はあるものの、
そのコマンド自体はバックグラウンドで実行させたいときに便利です。
これは
.Fl n
オプションも含んでいます。
リモートサイトで X11 プログラムを起動させる場合には、
.Ic ssh -f host xterm
などとやるのがおすすめです。
.Pp
もし
.Cm ExitOnForwardFailure
設定項目が
.Dq yes 
になっている場合、
.Fl f
で開始されたクライアントはすべてのポート転送の確立が成功するまで
待ってから、バックグラウンドに移行します。
.It Fl g
リモートホストが転送されたローカルなポートに接続することを許可します。
.It Fl I Ar pkcs11
.Nm
がユーザの RSA 秘密鍵を提供する PKCS#11 トークンと
通信するときに使う、PKCS#11 共有ライブラリを指定します。
.It Fl i Ar identityファイル
公開鍵認証の際に
identity (秘密鍵) を読むファイルを指定します。
デフォルトは、プロトコル バージョン 1 の場合
ユーザのホームディレクトリにある
.Pa ~/.ssh/identity
、プロトコル バージョン 2 の場合は
.Pa ~/.ssh/id_dsa ,
.Pa ~/.ssh/id_ecdsa
および
.Pa ~/.ssh/id_rsa
になっています。identity ファイルは設定ファイルによって、
ホストごとに指定することもできます。複数の
.Fl i
オプションを指定することも可能です。
(設定ファイルで複数の鍵を指定することもできます。)
また、
.Nm
は末尾に
.Pa -cert.pub
のついたファイル名から証明書を読み込もうとします。
.It Fl K
GSSAPI ベース認証および、
GSSAPI 証明書 (credential) のサーバへの転送 (委譲、delegation) を許可します。
.It Fl k
GSSAPI 証明書 (credential) をサーバに転送 (委譲、delegation) することを禁止します。
.It Fl L Xo
.Sm off
.Oo Ar bindするアドレス : Oc
.Ar ポート : ホスト : ホスト側ポート
.Sm on
.Xc
与えられたローカル (クライアント) ホスト上のポートが、
与えられたリモートホスト上のポートに転送されるよう指定します
(ローカル→リモートのポート転送)。
これはローカル側で
.Ar ポート
に listen (接続受け付け) 用の
ソケットを割り当てることによりおこなわれます。さらに
.Ar bindするアドレス
が与えられている場合は、ソケットはこのアドレスに bind されます。
このポートに向けておこなわれた接続はつねに
安全な通信路を経由してリモートマシン上に到達し、そこから
.Ar ホスト
のポート
.Ar ホスト側ポート
に接続されるようになります。
ポート転送は設定ファイルによっても指定できます。
IPv6 アドレスはブラケット [ ] で囲むことで指定できます。
特権ポートを転送できるのはスーパーユーザだけです。
デフォルトでは、ローカル側のポートは
.Cm GatewayPorts
の設定に従って bind されますが、
.Ar bindするアドレス
を明示的に指定することで、特定のアドレスに接続をふり向けることができます。
.Ar bindするアドレス
として
.Dq localhost
を指定すると、ポートを listen するのはローカルな使用のみに限ることになります。
いっぽう、空のアドレスまたは
.Sq \&*
を指定すると、そのポートはすべてのインターフェイスに対して使用可能になります。
.It Fl l Ar ログイン名
リモートマシン上でログインするユーザ名を指定します。
これは設定ファイルによって、ホストごとに指定することもできます。
.It Fl M
.Nm
を、接続を共有するための
.Dq master
モードにします。
.Fl M
オプションを複数個つけると
.Nm
は
.Dq master
モードになり、slave 接続を受けつける前に確認を求めます。
詳細については
.Xr ssh_config 5
の
.Cm ControlMaster
の項を参照してください。
.It Fl m Ar MAC指定
プロトコル バージョン 2 では、カンマで区切ったリストにより、
使用する MAC (message authentication code、
メッセージ認証コード) を優先順位を
つけて指定することができます。
MAC についての詳しい情報は
.Cm MACs
の項をご覧ください。
.It Fl N
リモートコマンドを実行しません。これはポート転送のみを
おこないたい場合に便利です (プロトコル バージョン 2 のみ)。
.It Fl n
標準入力を
.Pa /dev/null
からリダイレクトするように
(つまり標準入力からの読み込みを禁止した状態に) します。
.Nm
をバックグラウンドで走らせるときには、このオプションが不可欠です。
よくある手としては、リモートマシン上で X11 のプログラムを
走らせるときにこれを使うことです。たとえば、
.Ic ssh -n shadows.cs.hut.fi emacs &
で emacs を立ち上げると、X11 接続は暗号化された経路を
介して自動的に転送されます。
.Nm
プログラムはこの後バックグラウンドに移行するでしょう。
(これは
.Nm
がパスワードあるいはパスフレーズを訊いてくるときには使えません。
.Fl f
オプションを参照してください。)
.It Fl O Ar 制御コマンド
マスタープロセスから分岐した現在使用中の接続を制御します。
.Fl O
オプションが指定されている場合、
.Ar 制御コマンド
の指令はマスタープロセスに渡されます。
使用可能なコマンドは以下のとおりです:
.Dq check
(マスタープロセスが走っているかどうかチェックする)、
.Dq forward
(コマンドを実行せずにポート転送を要求する) 
.Dq exit
(マスタープロセスを終了するよう指示する)
および
.Dq stop
(マスタープロセスにこれ以上の分岐を止めるよう要求する)
.It Fl o Ar オプション
設定ファイルと同じ形式でオプションを与えたいときに使用します。
これはコマンドラインオプションでは指定できないオプションを
指定したいときに便利です。
以下のオプションの詳細と、これらがとりうる値については
.Xr ssh_config 5
を参照してください。
.Pp
.Bl -tag -width Ds -offset indent -compact
.It AddressFamily
.It BatchMode
.It BindAddress
.It ChallengeResponseAuthentication
.It CheckHostIP
.It Cipher
.It Ciphers
.It ClearAllForwardings
.It Compression
.It CompressionLevel
.It ConnectionAttempts
.It ConnectTimeout
.It ControlMaster
.It ControlPath
.It ControlPersist
.It DynamicForward
.It EscapeChar
.It ExitOnForwardFailure
.It ForwardAgent
.It ForwardX11
.It ForwardX11Timeout
.It ForwardX11Trusted
.It GatewayPorts
.It GlobalKnownHostsFile
.It GSSAPIAuthentication
.It GSSAPIDelegateCredentials
.It HashKnownHosts
.It Host
.It HostbasedAuthentication
.It HostKeyAlgorithms
.It HostKeyAlias
.It HostName
.It IdentityFile
.It IdentitiesOnly
.It IPQoS
.It KbdInteractiveAuthentication
.It KbdInteractiveDevices
.It KexAlgorithms
.It LocalCommand
.It LocalForward
.It LogLevel
.It MACs
.It NoHostAuthenticationForLocalhost
.It NumberOfPasswordPrompts
.It PasswordAuthentication
.It PermitLocalCommand
.It PKCS11Provider
.It Port
.It PreferredAuthentications
.It Protocol
.It ProxyCommand
.It PubkeyAuthentication
.It RekeyLimit
.It RemoteForward
.It RequestTTY
.It RhostsRSAAuthentication
.It RSAAuthentication
.It SendEnv
.It ServerAliveInterval
.It ServerAliveCountMax
.It StrictHostKeyChecking
.It TCPKeepAlive
.It Tunnel
.It TunnelDevice
.It UsePrivilegedPort
.It User
.It UserKnownHostsFile
.It VerifyHostKeyDNS
.It VisualHostKey
.It XAuthLocation
.El
.It Fl p Ar ポート
リモートホストに接続するポートを指定します。
これは設定ファイルによって、ホストごとに指定することもできます。
.It Fl q
静かなモード。ほとんどの警告メッセージや診断メッセージは抑制されます。
.It Fl R Xo
.Sm off
.Oo Ar bindするアドレス : Oc
.Ar ポート : ホスト : ホスト側ポート
.Sm on
.Xc
与えられたリモート (サーバ) ホスト上のポートが、
与えられたローカルホスト上のポートに転送されるよう指定します
(リモート→ローカルのポート転送)。
これはリモート側で
.Ar ポート
に listen (接続受け付け) 用の
ソケットを割り当てることによりおこなわれます。
このポートに向けておこなわれた接続はつねに
安全な通信路を経由してローカルマシン上に到達し、ここから
.Ar ホスト
のポート
.Ar ホスト側ポート
に接続されるようになります。
.Pp
ポート転送は設定ファイルによっても指定できます。特権ポートを
転送できるのは、リモートマシン上に root としてログインしているときだけです。
IPv6 アドレスはブラケット [ ] で囲むことで指定できます。
.Pp
デフォルトでは、サーバ側で listen するソケットは
ループバックインターフェイスのみに bind されます。
これは
.Ar bindするアドレス
を指定することによって上書きすることができます。
空の
.Ar bindするアドレス
または
.Ql *
をアドレスとして指定すると、サーバ側のソケットは
すべてのインターフェイスに対して listen するようになります。
.Ar bindするアドレス
にループバック以外の値が指定できるのは、
.Cm GatewayPorts
オプションが許可されているときのみです (
.Xr sshd_config 5
を参照してください)。
.Pp
.Ar ポート 
引数に
.Ql 0 
を指定した場合、listen するポートはサーバ側で動的に割り当てられ、
実行時にクライアント側にその値が報告されます。
.Ic -O forward
オプションと一緒に使用すると、割り当てられたポートが
標準出力に表示されます。
.It Fl S Ar 制御用パス名
接続を共有する際の制御用ソケットの位置を指定します。
ここで
.Dq none
を指定すると、接続共有は禁止されます。
詳細については
.Xr ssh_config 5
の
.Cm ControlMaster
および
.Cm ControlPath
の項を参照してください。
.It Fl s
リモート側でサブシステムの実行を要求するときに使われます。
サブシステムは SSH2 プロトコルで実現された機能であり、
これを使うと SSH を他のアプリケーション (
.Xr sftp 1
など) への安全な通信路として利用することができます。この場合、
サブシステム名はリモートコマンドとして指定します。
.It Fl T
仮想端末の割り当てを禁止します。
.It Fl t
強制的に仮想端末を割り当てます。これはリモートマシン上で
任意の画面ベースのプログラムを実行するとき
(たとえば、メニューサービスを実装するときなど)
に非常に便利です。
複数の 
.Fl t
をつけると、たとえ
.Nm
がローカル側での端末を持っていない場合でも
強制的に仮想端末を割り当てます。
.It Fl V
バージョン番号を表示して終了します。
.It Fl v
冗長表示モード。
.Nm
が進行中のデバッグメッセージを表示するようにします。
これは接続や認証、設定の問題をデバッグするときに助けとなります。
複数の
.Fl v
オプションをつけると出力が増えます。最大は 3 個です。
.It Fl W Ar ホスト : Ns Ar ポート
クライアントの標準入力と標準出力を、安全な通信路を通して
.Ar ホスト
の
.Ar ポート
上に接続します。
このオプションは、
.Fl N ,
.Fl T ,
.Cm ExitOnForwardFailure
および
.Cm ClearAllForwardings
を暗黙のうちに含んでおり、
プロトコル バージョン 2 でのみ使用できます。
.It Fl w Xo
.Ar ローカルtun Ns Op : Ns Ar リモートtun
.Xc
クライアント側の
.Ar ローカルtun
と、サーバ側の
.Ar リモートtun
の
.Xr tun 4
デバイスを使ったトンネリングを要求します。
これらのデバイスは数値か、あるいはキーワード
.Dq any
によって指定します。このキーワードを指定すると、
現在の次に使用可能なトンネルデバイスが使われます。
If
.Ar リモートtun
が指定されない場合は、デフォルトで
.Dq any 
になります。
.Xr ssh_config 5 
の
.Cm TunnelDevice
項目も参照してください。
.Cm Tunnel
項目が指定されていない場合、トンネルモードは
デフォルトの
.Dq point-to-point
になります。
.It Fl X
X11 の転送を許可します。
これは設定ファイルによって、ホストごとに指定することもできます。
.Pp
X11 の転送には注意が必要です。
リモートホスト上で (そのユーザの X 認証のための) ファイルアクセス権限を
無視できてしまうユーザがいる場合は、転送された接続を介してローカル側の
X11 ディスプレイにアクセスできてしまうことになります。
すると攻撃側はキーストロークを盗み見るなどの行為が可能になってしまうかも
しれません。
.Pp
このため、デフォルトでは X11 転送は X11 SECURITY 拡張機能の制約を
うけるようになっています。詳しくは、
.Nm
の
.Fl Y
オプション、および
.Xr ssh_config 5
の
.Cm ForwardX11Trusted
項目を参照してください。
.It Fl x
X11 の転送を禁止します。
.It Fl Y
信頼された X11 転送を許可します。
信頼された X11 転送は、X11 SECURITY 拡張機能の制約をうけることはありません。
.It Fl y
.Xr syslog 3
システムモジュールを使用してログ情報を送ります。
デフォルトでは、この情報は標準エラー出力に送られます。
.El
.Pp
さらに
.Nm
は、設定情報をユーザごとの設定ファイルおよび、
システム全体にわたる設定ファイルから取得します。
このファイルの形式と設定項目は
.Xr ssh_config 5
で説明されています。
.Sh 認証
OpenSSH SSH クライアントは SSH プロトコル バージョン 1 と
プロトコル バージョン 2 をサポートしています。
デフォルトでは、プロトコル バージョン 2 のみを使います。
これは
.Xr ssh_config 5 
の
.Cm Protocol
設定項目で変更するか、あるいは
.Fl 1
または
.Fl 2
オプション (上記参照) によって指定できます。
どちらのプロトコルも類似の認証機構を
サポートしていますが、プロトコル バージョン 2 は
より強力な秘匿性
(通信は AES、 3DES、 Blowfish、 CAST128 または Arcfour で
暗号化されます) および正真性
(hmac-md5, hmac-sha1, hmac-sha2-256, hmac-sha2-512, umac-64, hmac-ripemd160)
を提供しているため、こちらがデフォルトになっています。
プロトコル バージョン 1 は接続の正真性を保証する
(訳注: 内容の改ざんを防ぐ) 強力な機構が用意されていません。
.Pp
認証方式として使用可能なのは、
GSSAPIベースの認証 (GSSAPI-based authentication)、
ホストベースド認証 (host-based authentication)、
公開鍵認証 (public key authentication)、
チャレンジ・レスポンス認証 (challenge-response authentication)
およびパスワード認証 (password authentication) です。
認証方式はここに示した順序で使用されます。
ただしプロトコル バージョン 2 では
.Cm PreferredAuthentications 
設定項目によりこのデフォルトの順序を変更することもできます。
.Pp
ホストベースド認証 (hostbased authentication) は
以下のように動作します:
ユーザが 
.Nm
を実行するマシンが、リモートマシン側の
.Pa /etc/hosts.equiv
あるいは
.Pa /etc/shosts.equiv
に記載されており、さらにそのユーザ名が
双方で同じか、あるいはリモートマシン上の
そのユーザのホームディレクトリに
.Pa ~/.rhosts
あるいは
.Pa ~/.shosts
が存在して、クライアントマシンの名前と
そのマシン上でのそのユーザ名が記載されている場合、
そのユーザのログインが考慮されます。
サーバはさらに、このクライアントのホスト鍵
(以下の
.Pa /etc/ssh/ssh_known_hosts
と
.Pa ~/.ssh/known_hosts 
を参照)
が
.Em 必ず
正しいことを要求します。
これが正しければログインが許可されます。
この認証方式により IP 詐称、DNS 詐称やルーティング詐称などの
攻撃が迂回できます。
[管理者のかたに注意: 一般的にいって、
.Pa /etc/hosts.equiv 、
.Pa ~/.rhosts および
rlogin/rsh プロトコルは本質的に危険であり、
セキュリティを考慮するのであれば禁止すべきです。]
.Pp
公開鍵認証 (public key authentication) は
以下のようにして動作します:
このやりかたは公開鍵暗号技術に基づいており、
暗号化と復号をそれぞれ別の鍵を使っておこなう
ことができ、さらに復号用の鍵から暗号化用の鍵を
推測することは現実的にできないような暗号方式を使っています。
このアイデアは、まず各ユーザが認証のための
「秘密鍵」と「公開鍵」とよばれる鍵の対をつくります。
サーバは公開鍵を知っていますが、
秘密鍵のほうはユーザだけが知っているものとします。
.Nm
は公開鍵認証を実装しており、DSA, ECDSA あるいは RSA 方式を
使用しています。プロトコル バージョン 1 が使えるのは
RSA 方式だけですが、プロトコル バージョン 2 では
いずれの方式も使うことができます。
.Xr ssl 8
の
.Sx 歴史
セクションでは、
DSA および RSA アルゴリズムについて簡単に説明しています。
.Pp
.Pa ~/.ssh/authorized_keys
ファイルには、ログインが許可されている
公開鍵の一覧が書かれています。ユーザがログインする際、
.Nm
プログラムは、そのユーザがどの鍵の対を使って
認証しようとしているかをサーバに伝えます。
クライアントは自分が秘密鍵にアクセスできることを
サーバに対して証明し、サーバはそれに対応する公開鍵が
そのアカウントを受け入れる権限をもっているかどうかを
調べます。
.Pp
ユーザは
.Xr ssh-keygen 1
を使って自分の鍵の対をつくります。
このプログラムは、秘密鍵をユーザのホームディレクトリ内の
.Pa ~/.ssh/identity
(プロトコル バージョン 1)、
.Pa ~/.ssh/id_dsa
(プロトコル バージョン 2、DSA 方式)、
.Pa ~/.ssh/id_ecdsa
(プロトコル バージョン 2、ECDSA 方式)、
あるいは
.Pa ~/.ssh/id_rsa
(プロトコル バージョン 2、RSA 方式) に格納し、
公開鍵を
.Pa ~/.ssh/identity.pub
(プロトコル バージョン 1)、
.Pa ~/.ssh/id_dsa.pub
(プロトコル バージョン 2、DSA 方式) 、
.Pa ~/.ssh/id_ecdsa.pub
(プロトコル バージョン 2、ECDSA 方式) 
あるいは
.Pa ~/.ssh/id_rsa.pub
(プロトコル バージョン 2、RSA 方式) に格納します。
ユーザはこの公開鍵をリモートマシン上の
自分のホームディレクトリにある
.Pa ~/.ssh/authorized_keys
ファイルにコピーする必要があります。
.Pa authorized_keys
ファイルは従来の
.Pa ~/.rhosts
ファイルに相当し、1 行ごとにひとつの鍵を格納します。
各行はかなり長くなることもあります)。
この後、ユーザはパスワードなしでログインすることができます。
.Pp
公開鍵認証の変形として、
証明書 (certificate) を使った認証が使用できます。
これは、公開鍵・秘密鍵の対を使うかわりに、
署名された証明書を用います。この方法の利点は、
多くの公開鍵・秘密鍵ペアのかわりに、
単一の信頼された認証局 (CA) を使えることです。
より詳しい情報については
.Xr ssh-keygen 1
の
.Sx 証明書
のセクションを参照してください。
.Pp
公開鍵認証や証明書を使う際に、いちばん便利なのは
「認証エージェント」と呼ばれるものを使うことでしょう。
詳しくは
.Xr ssh-agent 1
のマニュアルページをごらんください。
.Pp
チャレンジ・レスポンス認証は以下のようにして動作します:
サーバは任意の
.Qq チャレンジ
文字列を送り、応答 (レスポンス) を求めます。
プロトコル バージョン 2 では複数のチャレンジとレスポンスを
許可しています。
プロトコル バージョン 1 で使えるチャレンジとレスポンスは
1 つだけです。
チャレンジ・レスポンス認証の例としては、
BSD 認証 (
.Xr login.conf 5 
を参照) や PAM (OpenBSD 以外のいくつかのシステム) などが
あります。
.Pp
もし他の認証方法が失敗した場合、
.Nm
はユーザにパスワードを要求します。
このパスワードは検査のためリモートホストに送られますが、
すべての通信は暗号化されているため、
ネットワークを盗聴している何者かに
よってパスワードが見られてしまうようなことはありません。
.Pp
.Nm
はこれまでに使った鍵すべてが入っているデータベースを
自動的に保持し、検査します。これらのうち、ホスト鍵はユーザの
ホームディレクトリにある
.Pa ~/.ssh/known_hosts
に格納されます。これらに加え、
.Pa /etc/ssh/ssh_known_hosts
も既知のホストとして自動的に検査されます。
新しいホストは、ユーザ側のファイルに自動的に追加されていきます。
もしあるホストの鍵がこれまでと変わっていた場合、
.Nm
は警告を発してパスワード認証を禁止します。
これはサーバの詐称やなりすまし攻撃を防ぐためです。
.Cm StrictHostKeyChecking
設定項目はホスト鍵が知られていなかったり、
それが変更されていた場合のログインを防ぐために使われます。
.Pp
そのユーザが本人であることが確認できると、
サーバは与えられたコマンドを実行するか、あるいはユーザを
そのマシンにログインさせてリモートマシンでの
標準的なシェルを与えます。
リモートのシェルやコマンドにおけるすべての通信は
自動的に暗号化されます。
.Pp
仮想端末が割り当てられている場合 
(通常のログインセッション時)、ユーザは
以下のエスケープ文字を使うことができます。
.Pp
仮想端末が割り当てられていない場合、
そのセッションは透過になります。そのため、
バイナリデータでも確実に転送できます。
ほとんどのシステムでは、
たとえ仮想端末が割り当てられている場合でもエスケープ文字に
.Dq none
を設定することによって、
そのセッションを透過にすることができます。
.Pp
セッションは、リモートマシン上のコマンドやシェルが完了し、
すべての X11 や TCP 接続が閉じられると終了します。
.Sh エスケープ文字
仮想端末が割り当てられている場合、
.Nm
ではエスケープ文字を使った機能が
いくつかサポートされています。
.Pp
チルダ記号そのものを 1 回入力するには
.Ic ~~
を押すか、上で述べられている以外の文字をチルダに続けます。
エスケープ文字は、つねに改行の直後に来なければ特別な文字とは
見なされません。エスケープ文字は、設定ファイルの
.Cm EscapeChar
設定項目あるいはコマンドラインの
.Fl e
オプションで変更できます。
.Pp
現在サポートされているエスケープ機能
(エスケープ文字はデフォルトの
.Ql ~ 
と仮定します) :
.Bl -tag -width Ds
.It Cm ~.
接続を切断します。
.It Cm ~^Z
sshをバックグラウンドに移行させます。
.It Cm ~#
いま転送されている接続の一覧を表示します。
.It Cm ~&
.Nm
をバックグラウンドに移行させ、転送された接続あるいは X11 の
セッションが終了するのを待ってログアウトします。
.It Cm ~?
エスケープ文字の一覧を表示します。
.It Cm ~B
リモートホストに BREAK 信号を送信します
(SSH プロトコル バージョン 2 で相手もそれを
サポートしている場合にのみ有効)。
.It Cm ~C
コマンドラインをオープンします。
現在これは
.Fl L 
、
.Fl R
および
.Fl D
オプション (上記参照) を使っていて、
ポート転送を追加したい場合に有効です。
また、これは
.Sm off
.Fl KR Oo Ar bindするアドレス : Oc Ar ポート
.Sm on
を使うことによって、すでに有効になっている
リモート側のポート転送を中止することも可能です。
.Ic !\& Ns Ar command
を使うと、
.Xr ssh_config 5 
の
.Ic PermitLocalCommand
設定項目が許可されている場合、ユーザは
ローカルなコマンドを実行することができます。
基本的なヘルプは
.Fl h
オプションを使ってください。
.It Cm ~R
その接続の rekeying を要求します 
(SSH プロトコル バージョン 2 で、
なおかつ相手がこれをサポートしているときのみ有効)。
.El
.Sh TCP 転送
安全な通信路を使った任意の TCP/IP 接続への転送は、
コマンドラインあるいは設定ファイルで指定します。
TCP 転送の応用として、メールサーバへの安全な
接続が考えられます。ほかにもファイヤーウォールを
またいで通信するなどの使いみちがあるでしょう。
.Pp
以下の例では、IRC クライアントとサーバの通信を
暗号化する方法を紹介します。たとえ IRC サーバが
暗号化を直接サポートしていなくても、
通信を暗号化することができます。
これは以下のようにして動作します:
まず、ユーザがリモートホストに
.Nm 
で接続し、リモートのサーバに接続を転送するために使う
ポート番号を指定します。このあと、クライアントマシン上で
暗号化のサービスを開始し、ローカルな同じポートに接続すると、
.Nm
はその接続を暗号化して転送します。
.Pp
以下の例では IRC のセッションを
クライアントマシン
.Dq 127.0.0.1
(localhost)
からリモートのサーバ
.Dq server.example.com 
へとトンネリングします:
.Bd -literal -offset 4n
$ ssh -f -L 1234:localhost:6667 server.example.com sleep 10
$ irc -c '#users' -p 1234 pinky 127.0.0.1
.Ed
.Pp
これはポート 1234 を使って IRC サーバ
.Dq server.example.com 
への接続をトンネリングし、ニックネーム
.Dq pinky 
で
.Dq #users 
チャンネルに join します。
ポート番号は、1024 以上であり
(特権ポートを使用できるのは root だけです)、
他のポートとかち合わなければどこでもかまいません。
この接続はリモートサーバ上のポート 6667 に転送されます。
これが IRC サービスの標準的なポート番号だからです。
.Pp
.Fl f
オプションは
.Nm
をバックグラウンド化させるために利用し、
リモートコマンド
.Dq sleep 10
はトンネリングするサービスが開始されるまでに
一定の時間 (この例では 10 秒) を与えています。
もしここで指定された時間内に接続が行われない場合、
.Nm
は終了するでしょう。
.Sh X11 転送
.Cm ForwardX11
項目が
.Dq yes
に設定されており (または上記の
.Fl X
および
.Fl x
オプションを参照してください)、
ユーザが X11 を使っている (環境変数
.Ev DISPLAY
が設定されている) 場合、X11 ディスプレイへの接続は
自動的にリモート側に転送されます。つまり、
シェル (あるいはコマンド) から起動された X11 プログラムはみな
暗号化された通信路を通り、本来の X サーバへの接続は
ローカルマシン上からなされるようになります。
ユーザは
.Ev DISPLAY
を手動で設定すべきではありません。
X11 接続の転送はコマンドラインあるいは
設定ファイルによって設定できます。
.Pp
.Nm
によって設定された
.Ev DISPLAY
の値はサーバマシン上を指すようになっていますが、
ディスプレイ番号は 0 より大きい値になっているでしょう。
これは正常な状態です。
.Nm
は暗号化された通信路を介して接続を転送します。
そのため、サーバマシン上に X サーバの
.Dq プロキシ
をつくるのでこうなるのです。
.Pp
また、
.Nm
はサーバマシン上で Xauthority 情報を自動的に用意します。
.Nm
はこのためにランダムな認証クッキーを生成し、サーバ側の
Xauthority に格納し、接続が転送されるときは
すべてこのクッキーを持たせるようにします。
そして接続が開かれるときに、これが本物のクッキーと置き換わる
ようにするのです。本物の認証クッキーがサーバ側に
送られることは決してありません 
(し、暗号化されないままでクッキーが送られることもありません)。
.Pp
.Cm ForwardAgent
設定項目が
.Dq yes
になっていて、ユーザが認証エージェントを使っている場合、
認証エージェントに対する接続は
自動的にリモート側に転送されます。
(以下で説明する
.Fl A
and
.Fl a
オプションも参照のこと)。
.Sh ホスト鍵の検証
あるサーバに最初に接続したとき、(
.Cm StrictHostKeyChecking
設定項目で禁止されていない限り)
ユーザにはそのサーバの公開鍵の指紋 (fingerprint) が
提示されます。指紋は
.Xr ssh-keygen 1 
コマンドによって得ることができます:
.Pp
.Dl $ ssh-keygen -l -f /etc/ssh/ssh_host_rsa_key
.Pp
もしこの指紋がすでにわかっている場合、
これが一致するかどうかを見て、その鍵を受け入れるか拒否するかを決めることができます。
しかし2つのホスト鍵が一致しているかどうかを、
16進文字列を見比べて判断することは難しいため、
.Em random art 
技術を使って、これらのホスト鍵を視覚的に比較することができます。
.Cm VisualHostKey
設定項目を
.Dq yes 
にすると、サーバにログインするたびに (そのセッションが対話的であるかないかに関わらず)
小さなアスキーアートが表示されます。
あらかじめ、既知のサーバが返すパターンを見ておくことにより、
ユーザはそのホスト鍵が完全に違うパターンになっているかどうかを
容易に判定することができます。
これらのパターンに曖昧性がないわけではありません。
あるパターンが以前のものに似ている場合、それは高い確率で
ホスト鍵が同じであるとはいえますが、それが完全に保証されているわけではありません。
.Pp
既知のすべてのホスト鍵に対して、それらの指紋の random art パターンを
表示したい場合は、以下のコマンドを使ってください:
.Pp
.Dl $ ssh-keygen -lv -f ~/.ssh/known_hosts
.Pp
指紋がまだわかっていない場合、別の方法として、
SSH の指紋を DNS によって検証することができます。
追加の資源レコード (RR) である SSHFP を zone ファイルに
追加し、接続するクライアントが提示された公開鍵とその指紋を
照合することができます。
.Pp
以下の例では、あるクライアントがサーバ
.Dq host.example.com 
に接続するものとします。まず
SSHFP 資源レコードを host.example.com の zone ファイルに
追加する必要があります:
.Bd -literal -offset indent
$ ssh-keygen -r host.example.com.
.Ed
.Pp
ここで出力された行を zone ファイルに追加します。
このゾーンが指紋の問い合わせに応答するかどうかは、
以下のようにしてチェックできます。
.Pp
.Dl $ dig -t SSHFP host.example.com
.Pp
最後に、クライアントが以下のようにして接続します:
.Bd -literal -offset indent
$ ssh -o "VerifyHostKeyDNS ask" host.example.com
[...]
Matching host key fingerprint found in DNS.
Are you sure you want to continue connecting (yes/no)?
.Ed
.Pp
詳しくは
.Xr ssh_config 5
の
.Cm VerifyHostKeyDNS
設定項目を参照してください。
.Sh SSHを使った仮想プライベートネットワーク (VPN)
.Nm
は、仮想ネットワークデバイスである
.Xr tun 4
を使った、仮想プライベートネットワーク (VPN) の
トンネリングをサポートしています。
これにより、異なる 2 つのネットワークを
安全に結合することができます。
.Xr sshd_config 5
ファイルにある
.Cm PermitTunnel
設定項目は、
サーバがこの機能をサポートするかどうか、
およびサポートするレベル (レイヤ 2 あるいはレイヤ 3)
を指定します。
.Pp
以下の例では、SSH サーバがリモートのネットワークの
ゲートウェイとして 192.168.1.15 で動いていると仮定した場合に
クライアント側のネットワーク 10.0.50.0/24 と、
リモート側のネットワーク 10.0.99.0/24 とを、
10.1.1.1 から 10.1.1.2 への point-to-point 接続を使って結合します。
このときリモート側ネットワークのゲートウェイでは 192.168.1.15 で
SSH サーバが走っており、この接続を許可しているものとします。
.Pp
クライアント側:
.Bd -literal -offset indent
# ssh -f -w 0:1 192.168.1.15 true
# ifconfig tun0 10.1.1.1 10.1.1.2 netmask 255.255.255.252
# route add 10.0.99.0/24 10.1.1.2
.Ed
.Pp
サーバ側:
.Bd -literal -offset indent
# ifconfig tun1 10.1.1.2 10.1.1.1 netmask 255.255.255.252
# route add 10.0.50.0/24 10.1.1.1
.Ed
.Pp
クライアントのアクセス権限はサーバ側の
.Pa /root/.ssh/authorized_keys
ファイル (下記参照)、およびサーバの
.Cm PermitRootLogin
設定項目でより細かく制御できます。
以下のエントリは、
.Cm PermitRootLogin
項目が
.Dq forced-commands-only 
に設定されている場合のもので、ユーザ jane に対しては
.Xr tun 4
デバイス 1番 への接続を許可し、
ユーザ john に対しては
tun デバイス 2 番 への接続を許可します:
.Bd -literal -offset 2n
tunnel="1",command="sh /etc/netstart tun1" ssh-rsa ... jane
tunnel="2",command="sh /etc/netstart tun2" ssh-rsa ... john
.Ed
.Pp
SSH 経由の VPN は大きなオーバーヘッドをともなうため、
これはワイヤレス VPN などの、
一時的な設定にのみ使うのが望ましいでしょう。
より長期的な VPN 接続は、
.Xr ipsecctl 8
や
.Xr isakmpd 8 
といったツールを使うほうが優れています。
.Sh 環境変数
.Nm
はふつう以下の環境変数を設定します:
.Bl -tag -width "SSH_ORIGINAL_COMMAND"
.It Ev DISPLAY
環境変数
.Ev DISPLAY
は X11 サーバの場所を示しています。これは
.Nm
によって、
.Dq hostname:n
という形の値が自動的に設定されます。
ここで
.Dq hostname
の部分はシェルが走っているホストを表しており、
.Sq n
は n \*(Ge 1 の整数です。
.Nm
は X11 接続を安全な通信路で転送するために、この特別な値を使います。
X11 の接続が安全でなくなってしまうため、ユーザは環境変数
.Ev DISPLAY
を自分で設定すべきではありません
(また、それをやってしまうとユーザは認証に必要なクッキーを手で
コピーしなければならなくなります)。
.It Ev HOME
ユーザのホームディレクトリのパス名が設定されます。
.It Ev LOGNAME
環境変数
.Ev USER
と同じです。
これは、この変数を使うシステムで互換性を保つために設定されます。
.It Ev MAIL
ユーザのメールボックスのパス名が設定されます。
.It Ev PATH
デフォルトの
.Ev PATH
です。これは
.Nm
のコンパイル時に指定されます。
.It Ev SSH_ASKPASS
パスフレーズを入力する際、
.Nm
が端末から起動されていると
.Nm
はパスフレーズをその端末から要求します。
.Nm
が制御できる端末を持っておらず、環境変数
.Ev DISPLAY
および
.Ev SSH_ASKPASS
が設定されている場合、
.Nm
は
.Ev SSH_ASKPASS
によって指定されるプログラムを起動し、X11 ウインドウを使って
パスフレーズを要求します。
これは
.Nm 
を
.Pa .xsession
やそれに類するスクリプトから呼び出す際にとくに役に立ちます。
(マシンによっては、これがうまく動くためには
標準入力を
.Pa /dev/null
にリダイレクトする必要があるかもしれません)
.It Ev SSH_AUTH_SOCK
認証エージェントと通信するのに使われる
.Ux
ドメインソケットの
パスを表しています。
.It Ev SSH_CONNECTION
接続の両端にあるクライアントとサーバの識別子です。
この変数にはスペースで区切られた 4 つの値が入っています:
クライアントの IP アドレス、クライアントのポート、
サーバの IP アドレス および サーバのポートです。
.It Ev SSH_ORIGINAL_COMMAND
強制コマンドが実行されると、この変数には、
元々指定されていたコマンドラインの値が入ります。
ここから本来の引数を取り出すことができます。
.It Ev SSH_TTY
現在のシェルあるいはコマンドに割り当てられている tty の名前
(端末装置へのパス) に設定されます。現在のセッションが端末を
持たない場合、この変数は設定されません。
.It Ev TZ
デーモンが起動したとき、現在の時間帯を表すタイムゾーン変数が
設定されていると、それがここに入ります (つまりデーモンは
その値を新規の接続に渡します)。
.It Ev USER
ログインしているユーザ名に設定されます。
.El
.Pp
これらに加えて、
.Nm
は
.Pa ~/.ssh/environment
ファイルが存在してユーザがその変更を許可されていればそれを読み込み、
.Dq VARNAME=value
という形式の行を環境変数に追加します。
より詳しい情報については、
.Xr sshd_config 5
の
.Cm PermitUserEnvironment
設定項目を参照してください。
.Sh 関連ファイル
.Bl -tag -width Ds -compact
.It Pa ~/.rhosts
このファイルはホストベースド認証 
(host-based authentication、上記参照) で使われます。
ユーザのホームディレクトリが NFS パーティション上にあるような
マシンでは、このファイルは誰にでも読み込み
可能でなければなりません。なぜなら
.Xr sshd 8
はこれを root として読むからです。
また、このファイルはそのユーザの所有でなければならず、
他の人が書き込み可能であってはいけません。
ほとんどのマシンにおける推奨されるパーミッションは、
所有者は読み書き可能であるが、
他の人はアクセス不可能というものです。
.Pp
.It Pa ~/.shosts
このファイルは
.Pa .rhosts
とまったく同じように扱われます。
このファイルを使うと、rlogin や rsh では
ログインできないようにしつつ、
ホストベースド認証を許可することができます。
.Pp
.It Pa ~/.ssh/
このディレクトリはユーザ用のすべての設定や認証用の情報が入る
デフォルトの場所です。一般的に、このディレクトリの内容をまるごと
隠しておくという必要があるわけではありませんが、推奨される
パーミッションは、所有者に対しては read/write/execute を許可し、
他の人にはアクセスさせないようにしておく、というものです。
.Pp
.It Pa ~/.ssh/authorized_keys
このユーザのログインに使われる公開鍵 (DSA/RSA/ECDSA) の一覧です。
この形式は
.Xr sshd 8
のマニュアルで説明されています。
これは特に見られてまずいというものではないのですが、
できれば所有者からは読み/書きが可能で、
他人からはアクセス不可能なパーミッションに
設定しておくのがよいでしょう。
.Pp
.It Pa ~/.ssh/config
ユーザごとの個人用設定ファイルです。
このファイルの形式と設定項目は
.Xr ssh_config 5
で説明されています。
このファイルは潜在的に悪用される危険性があるため、
パーミッションは厳しくしておくのがいいでしょう。
所有者のみが読み書き可能で、
他からはアクセスできないようにしておくべきです。
.Pp
.It Pa ~/.ssh/environment
環境変数の追加定義を格納します。上の
.Sx 環境変数
のセクションを見てください。
.Pp
.It Pa ~/.ssh/identity
.It Pa ~/.ssh/id_dsa
.It Pa ~/.ssh/id_ecdsa
.It Pa ~/.ssh/id_rsa
認証のための秘密鍵が格納されています。
これらのファイルには他人に見られてはいけないデータが
入っているため、そのユーザには読めても、
他人からはアクセスできないようにしてください
(読み込み/書き込み/実行属性ともに)。
.Nm
は、他人にアクセスできるようになっている
秘密鍵ファイルは無視するので注意してください。
鍵を作成するときにパスフレーズを指定することも可能です。この
パスフレーズはファイル中の見られるべきでない部分を、
3DES を使って暗号化するのに用いられます。
.Pp
.It Pa ~/.ssh/identity.pub
.It Pa ~/.ssh/id_dsa.pub
.It Pa ~/.ssh/id_ecdsa.pub
.It Pa ~/.ssh/id_rsa.pub
認証のための公開鍵が格納されています。
これらのファイルは見られてもよいため、他人が読めるように
しておいてもかまいません (が、別にそうする必要はありません)。
.Pp
.It Pa ~/.ssh/known_hosts
にはユーザがこれまでにログインしたホスト鍵のうち、
システム全体の known_hosts 一覧にないものが格納されます。
このファイルの形式に関する詳しい情報は
.Xr sshd 8
を参照してください。
.Pp
.It Pa ~/.ssh/rc
このファイルのコマンドは、ユーザがログインしてシェル
(あるいはコマンド) が開始する直前に
.Nm
によって実行されます。
より詳しい情報については
.Xr sshd 8
のマニュアルを見てください。
.Pp
.It Pa /etc/hosts.equiv
このファイルはホストベースド認証 
(host-based authentication、上記参照) で使われます。
このファイルは root だけが書き込めるようにしておくべきです。
.Pp
.It Pa /etc/shosts.equiv
このファイルは
.Pa /etc/hosts.equiv
とまったく同じように扱われます。
このファイルを使うと、rlogin や rsh では
ログインできないようにしつつ、
ホストベースド認証を許可することができます。
.Pp
.It Pa /etc/ssh/ssh_config
システム全体にわたる設定ファイルです。
このファイルの形式と設定項目は
.Xr ssh_config 5
で説明されています。
.Pp
.It Pa /etc/ssh/ssh_host_key
.It Pa /etc/ssh/ssh_host_dsa_key
.It Pa /etc/ssh/ssh_host_ecdsa_key
.It Pa /etc/ssh/ssh_host_rsa_key
これら 3 つのファイルにはホスト秘密鍵が格納されています。
これらは、ホストベースの認証に使われます。
プロトコル バージョン 1 を使う場合、
ホスト鍵は root にしか読めないので
.Nm
を setuid root しておく必要があります。
プロトコル バージョン 2 の場合、
.Nm
はホスト鍵のアクセスに
.Xr ssh-keysign 8
を使用します。
これにより、ホストベースの認証方法を使うときも
.Nm
を setuid root しておく必要がなくなります。
デフォルトでは
.Nm
は setuid root されていません。
.Pp
.It Pa /etc/ssh/ssh_known_hosts
システム全体の known_hosts ファイルです。
このファイルはシステム管理者によって用意され、
その組織内で使われるすべてのマシン用の公開ホスト鍵を
格納するようになっているべきです。
このファイルは誰でも読めるようになっている必要があります。
このファイルの詳しい形式は
.Xr sshd 8
のマニュアルで説明されています。
.Pp
.It Pa /etc/ssh/sshrc
このファイル中のコマンドは、ユーザがログインしたあと、
そのユーザのシェル (あるいはコマンド) が開始する直前に
.Nm
によって実行されます。
より詳しい情報については
.Xr sshd 8
のマニュアルを見てください。
.El
.Sh 終了状態
.Nm
はリモートで実行されたコマンドの終了状態か、
もしエラーが発生した場合は 255 を終了状態として返します。
.Sh 関連項目
.Xr scp 1 ,
.Xr sftp 1 ,
.Xr ssh-add 1 ,
.Xr ssh-agent 1 ,
.Xr ssh-keygen 1 ,
.Xr ssh-keyscan 1 ,
.Xr tun 4 ,
.Xr hosts.equiv 5 ,
.Xr ssh_config 5 ,
.Xr ssh-keysign 8,
.Xr sshd 8
.Rs
.%R RFC 4250
.%T "The Secure Shell (SSH) Protocol Assigned Numbers"
.%D 2006
.Re
.Rs
.%R RFC 4251
.%T "The Secure Shell (SSH) Protocol Architecture"
.%D 2006
.Re
.Rs
.%R RFC 4252
.%T "The Secure Shell (SSH) Authentication Protocol"
.%D 2006
.Re
.Rs
.%R RFC 4253
.%T "The Secure Shell (SSH) Transport Layer Protocol"
.%D 2006
.Re
.Rs
.%R RFC 4254
.%T "The Secure Shell (SSH) Connection Protocol"
.%D 2006
.Re
.Rs
.%R RFC 4255
.%T "Using DNS to Securely Publish Secure Shell (SSH) Key Fingerprints"
.%D 2006
.Re
.Rs
.%R RFC 4256
.%T "Generic Message Exchange Authentication for the Secure Shell Protocol (SSH)"
.%D 2006
.Re
.Rs
.%R RFC 4335
.%T "The Secure Shell (SSH) Session Channel Break Extension"
.%D 2006
.Re
.Rs
.%R RFC 4344
.%T "The Secure Shell (SSH) Transport Layer Encryption Modes"
.%D 2006
.Re
.Rs
.%R RFC 4345
.%T "Improved Arcfour Modes for the Secure Shell (SSH) Transport Layer Protocol"
.%D 2006
.Re
.Rs
.%R RFC 4419
.%T "Diffie-Hellman Group Exchange for the Secure Shell (SSH) Transport Layer Protocol"
.%D 2006
.Re
.Rs
.%R RFC 4716
.%T "The Secure Shell (SSH) Public Key File Format"
.%D 2006
.Re
.Rs
.%R RFC 5656
.%T "Elliptic Curve Algorithm Integration in the Secure Shell Transport Layer"
.%D 2009
.Re
.Rs
.%T "Hash Visualization: a New Technique to improve Real-World Security"
.%A A. Perrig
.%A D. Song
.%D 1999
.%O "International Workshop on Cryptographic Techniques and E-Commerce (CrypTEC '99)"
.Re
.Sh 作者
OpenSSH は Tatu Ylonen による、フリーな
オリジナル版 ssh 1.2.12 リリースから派生したものです。
Aaron Campbell、 Bob Beck、 Markus Friedl、 Niels Provos、
Theo de Raadt および Dug Song が多くのバグを取り除き、
新しい機能をふたたび追加して OpenSSH をつくりました。
SSH プロトコル バージョン 1.5 および 2.0 のサポートは
Markus Friedl の貢献によるものです。
